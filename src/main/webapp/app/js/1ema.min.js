var core = angular.module('core', ['ionic']);
var app = angular.module('app', ['ionic', 'core', 'ngFileUpload']);


app.config(['$ionicConfigProvider', function ($ionicConfigProvider) {
    $ionicConfigProvider.views.maxCache(5);

    $ionicConfigProvider.tabs.position('bottom');
}]);

app.run(['$ionicPlatform', '$state', 'appModel', '$rootScope', 'wechat', function ($ionicPlatform, $state, appModel, $rootScope, wechat) {

    //$rootScope.$on('$stateChangeStart', function () {
    var user = appModel.get('userInfo');
    if (angular.isUndefined(user)) {
        $state.go("tab.login");
    }
    //});

    var pluginKeyboard = function () {
        if (window.cordova && window.cordova.plugins.Keyboard) {
            cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
            cordova.plugins.Keyboard.disableScroll(true);
        } else {
            console.log('*** Plugin not found: Keyboard');
        }
    };
    $ionicPlatform.ready(function () {
        /*pluginKeyboard();*/
    });
}]);

app.constant('$ionicLoadingConfig', {
    template: '<img ng-src="img/loading.gif"/>',
    noBackdrop: true,
    hideOnStateChange: true
});

app.config(['$stateProvider', '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {

        $urlRouterProvider.otherwise('/tab/login');

        $stateProvider
            .state('tab', {
                url: '/tab',
                abstract: true,
                views: {
                    'main': {
                        templateUrl: 'templates/tabs.html',
                        controller: 'tabsCtrl'
                    }
                }
            })
            .state('tab.index', {
                url: '/index',
                views: {
                    'tab-index': {
                        templateUrl: 'templates/me/integral_index.html',
                        controller: 'indexPaopaoCtrl'
                    }
                }
            })
            .state('tab.guide', {
                url: '/guide',
                views: {
                    'tab-product': {
                        templateUrl: 'templates/product/guide.html'
                    }
                }
            })
            .state('tab.product-sort', {
                url: '/product-sort',
                views: {
                    'tab-product': {
                        templateUrl: 'templates/product/product_sort.html',
                        controller: 'productSortCtrl'
                    }
                }
            })
            .state('tab.product-brand', {
                url: '/product-brand',
                views: {
                    'tab-product': {
                        templateUrl: 'templates/product/product_brand.html',
                        controller: 'productBrandCtrl'
                    }
                }
            })
            .state('tab.product-brand-pre', {
                url: '/product-brand-pre',
                views: {
                    'tab-product': {
                        templateUrl: 'templates/product/product_brand_pre.html',
                        controller: 'productBrandPreCtrl'
                    }
                }
            })
            .state('tab.product-series', {
                url: '/product-series',
                views: {
                    'tab-product': {
                        templateUrl: 'templates/product/product_series.html',
                        controller: 'productSeriesCtrl'
                    }
                }
            })
            .state('tab.product-demand-form', {
                url: '/product-demand-form/:tag',
                views: {
                    'tab-product': {
                        templateUrl: 'templates/product/product_demand_form.html',
                        controller: 'productDemandFormCtrl'
                    }
                }
            })
            .state('tab.product-sale-demand-form', {
                url: '/product-demand-form/:tag',
                views: {
                    'tab-sale': {
                        templateUrl: 'templates/product/product_demand_form.html',
                        controller: 'productSaleDemandFormCtrl'
                    }
                }
            })
            // .state('tab.product-recommend-demand-form', {
            //     url: '/product-demand-form/:tag',
            //     views: {
            //         'tab-recommend': {
            //             templateUrl: 'templates/product/product_demand_form.html',
            //             controller: 'productRecommendDemandFormCtrl'
            //         }
            //     }
            // })
            // .state('tab.recommend', {
            //     url: '/recommend',
            //     views: {
            //         'tab-recommend': {
            //             templateUrl: 'templates/product/recommend.html',
            //             controller: 'recommendCtrl'
            //         }
            //     }
            // })
            .state('tab.login', {
                url: '/login',
                views: {
                    'tab-task': {
                        templateUrl: 'templates/me/login.html',
                        controller: 'loginCtrl'
                    }
                }
            })
            .state('tab.product-detail', {
                url: '/product-detail/:psid',
                views: {
                    'tab-sale': {
                        templateUrl: 'templates/product/product_detail.html',
                        controller: 'productDetailCtrl'
                    }
                }
            })
            .state('tab.sale', {
                url: '/sale',
                views: {
                    'tab-sale': {
                        templateUrl: 'templates/product/sale.html',
                        controller: 'saleCtrl'
                    }
                }
            })
            .state('tab.order-detail', {
                url: '/order-detail/:oid',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/order_detail.html',
                        controller: 'detailCtrl'
                    }
                }
            })
            .state('tab.quote', {
                url: '/quote/:qid',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/quote.html',
                        controller: 'quoteCtrl'

                    }
                }
            })
            /* .state('tab.invoice', {
             url: '/invoice',
             views: {
             'tab-me': {
             templateUrl: 'templates/me/invoice.html'
             }
             }
             })*/
            .state('tab.receipt', {
                url: '/receipt/:uid',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/receipt.html',
                        controller: 'receiptCtrl'
                    }
                }
            })
            .state('tab.revisepwd', {
                url: '/revisepwd',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/revisepwd.html',
                        controller: 'revisepwdCtrl'
                    }
                }
            })
            .state('tab.changepwd', {
                url: '/changepwd',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/change_pwd.html',
                        controller: 'changepwdCtrl'
                    }
                }
            })
            .state('tab.register', {
                url: '/register',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/register.html',
                        controller: 'registerCtrl'
                    }
                }
            })

            .state('tab.me', {
                url: '/me',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/me.html',
                        controller: 'meCtrl'
                    }
                }
            })
            .state('tab.order-list', {
                url: '/order_list',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/order_list.html',
                        controller: 'orderListCtrl'
                    }
                }
            })
            .state('tab.invoice-list', {
                url: '/invoice-list/:history',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/invoice_list.html',
                        controller: 'invoiceListCtrl'
                    }
                }
            })
            .state('tab.invoice-edit', {
                url: '/invoice-edit/:tag',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/invoice_edit.html',
                        controller: 'invoiceEditCtrl'
                    }
                }
            })
            .state('tab.message', {
                url: '/message',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/message.html',
                        controller: 'messageCtrl'
                    }
                }
            })
            .state('tab.suggestion', {
                url: '/suggestion',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/suggestion.html',
                        controller: 'suggestionCtrl'
                    }
                }
            })
            .state('tab.req-vip', {
                url: '/req-vip',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/req_vip.html',
                        controller: 'reqVipCtrl'
                    }
                }
            })
            .state('tab.about-us', {
                url: '/about-us',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/about_us.html'
                    }
                }
            })
            .state('tab.bank-info', {
                url: '/bank-info',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/bank_info.html'
                    }
                }
            })
            // add后加内容
            // 领取任务
            .state('tab.jobSuccess', {
                url: '/taskTnput/:jobId',
                views: {
                    'tab-task': {
                        templateUrl: 'templates/task/tackFill.html',
                        controller: 'jobSuccessCtrl'
                    }
                }
            })
            // 领取成功
            .state('tab.tackSuccess', {
                url: '/tackSuccess',
                views: {
                    'tab-task': {
                        templateUrl: 'templates/task/tackSuccess.html',
                        controller: ''
                    }
                }
            })
            .state('tab.task', {
                url: '/task',
                views: {
                    'tab-task': {
                        templateUrl: 'templates/task/taskList.html',
                        controller: 'taskListCtrl'
                    }
                }
            })
            .state('tab.tackDetails', {
                url: '/tackDetails/:psid',
                views: {
                    'tab-task': {
                        templateUrl: 'templates/task/tackDetails.html',
                        controller: 'tackDetailsCtrl'
                    }
                }
            })
            .state('tab.integralRecord', {
                url: '/integral-record',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/integral-record.html',
                        // controller: ''
                    }
                }
            })
            .state('tab.integralRule', {
                url: '/integral-rule',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/integral-rule.html',
                        // controller: ''
                    }
                }
            })
            .state('tab.integral-me', {
                url: '/integral-me',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/integral-me.html',
                        controller: 'pointCtrl'
                    }
                }
            })
            .state('tab.MyTaskList', {
                url: '/MyTaskList',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/taskListMy.html',
                        controller: 'MyTaskListCtrl'
                    }
                }
            })
            .state('tab.MyTaskDetail', {
                url: '/MyTaskDetail/:psid',
                views: {
                    'tab-task': {
                        templateUrl: 'templates/me/tackDetails.html',
                        controller: 'MyTaskDetailCtrl'
                    }
                }
            })
            .state('tab.integral-withdraw', {
                url: '/integral-withdraw',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/integral-withdraw.html',
                        controller: 'withdrawCtrl'
                    }
                }
            })
            .state('tab.integral-rule', {
                url: '/integral-rule',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/integral-rule.html',
                        // controller: ''
                    }
                }
            })
            .state('tab.integral-record', {
                url: '/integral-record',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/integral-record.html',
                        controller: 'withdrawCtrl'
                    }
                }
            })
            .state('tab.integral-withdraw-rule', {
                url: '/integral-withdraw-rule',
                views: {
                    'tab-me': {
                        templateUrl: 'templates/me/integral-withdraw-rule.html',
                        // controller: ''
                    }
                }
            })
        ;

    }]);

app.constant('config', {
    "endpoint": "",
    "getProductDictList": "/dict/dictlist",
    "getDictPre": "/dict/pre",
    "getProductDetail": "/product/detail",
    "getProductList": "/product/list",
    "saveProductDemand": "/req/product-req",
    "productDemandFileUpload": "/req/req-file-upload",
    "dictType": {
        "sort": 1,
        "brand": 2,
        "series": 3
    },
    "productType": {
        "sale": 1,
        "recommend": 2,
        "common": 3
    },
    "getfasong": "/personal/identifycode",
    "getUserUname": "/personal/checkuser",
    "getUser": "/personal/getUser",
    "login": " /personal/login",
    "getOrderList": "/personal/getOrderlist",
    "resetPassword": "/personal/changepw",
    "getOrderDetail": "/personal/getDetailOrder",


    "register": "/personal/register",
    "getQuoteList": "/personal/selectquo",
    "updateQuote": "/personal/updatequo",
    "getInvoiceList": "/personal/selectinvoice",
    "deleteInvoice": "/personal/delinvoice",
    "updateInvoice": "/personal/updateinvoice",
    "addInvoice": "/personal/addinvoice",
    "getMessageList": "/personal/selectMessage",
    //我的积分
    "getPointInfo": "/pointApi/get-pointRanking2",
    "getPointList": "/userPointApi/get-userPoint2",
    // index
    "getPointRanking": "/pointApi/get-pointRanking2",
    //我的任务
    "getMyTaskList": "/userApi/get-userJob",
    // 放弃任务
    "getGiveUpTask": "/userApi/abandon-userJob2",
    //任务列表
    "getTaskList": "/jobApi/get-job",
    // 任务惩罚地址
    "getPunishment": "/jobApi/get-getJob2",
    // 领取任务
    "getJobSuccess": "/jobApi/get-jobSuccess2",
    "getTaskDetail": "/jobApi/get-jobDetail",
    "readMessage": "/personal/updateMsgStatus",
    "commitSuggestion": "/personal/suggest",
    "getSysConfig": "/config/get-config",
    "reqVip": "/personal/applyvip",
    //"imgUrl": 'http://7xs154.com1.z0.glb.clouddn.com/'
    "imgUrl": 'http://image.comeon365.com/',
    "wechatConf": '/wechat/signature',
    "serviceTel": '',
    "regExp": {
        phone: /^1[34578]\d{9}$/,
        money: /^\d+([.]\d{0,2})?$/,
        quantity: /^\d+$/
    },
    defaultShareData: {
        title: '坤玛机电',
        imgUrl: 'http://app.comeon365.com/app/img/logo.png',
        desc: '工业机电自动化产品一站式采购中心'
    }
});
app.controller('productListCtrl', ['$scope', 'server', function ($scope, server) {

    $scope.initPage = function () {
        server.getProductList().then(function (data) {
            //console.log(data);

            $scope.data = data;
        }, function (error) {
            //console.log(error);
        });
    };


}]);
app.controller('tabsCtrl', ['$scope', '$ionicHistory','$state' ,function ($scope, $ionicHistory,$state) {
    $scope.clearHistory = function () {
        $ionicHistory.clearHistory();
    };
    $scope.clearCache = function (param) {
        $state.go(param);
    };
}]);
app.controller('detailCtrl', ['$scope', '$state', 'server', 'appModel', 'config', 'popup',
    function ($scope, $state, server, appModel, config, popup) {
        $scope.orderDetail = {};
        $scope.preOrderList = [];
        $scope.requirement = {};
        $scope.serviceTel = config.serviceTel;

        $scope.imgUrl = config.imgUrl;
        var oid = $state.params['oid'];
        var _init = function () {
            if ($scope.serviceTel == '') {
                server.getSysConfig().then(function (data) {
                    $scope.serviceTel = data.tel;
                });
            }
        }
        _init();

        $scope.initPage = function () {
            server.getOrderDetail(oid).then(function (data) {
                $scope.orderDetail = data.ordOrder;
                $scope.preOrderList = data.ordPreOrders;
                $scope.requirement = data.requirement;
            })
        };

        $scope.initPage();
        $scope.goQuote = function (qid) {
            if ($scope.orderDetail.status < 2) {
                popup.alert({msg: '报价单未生成!'});
                return;
            }
            $state.go('tab.quote', {qid: qid});
        };
        $scope.contactUs = function () {
            return popup.showContact();
        };

    }]);
app.controller('invoiceEditCtrl', ['$scope', '$state', 'server', 'appModel', 'config', 'popup', function ($scope, $state, server, appModel, config, popup) {
    var tag = $state.params.tag;
    $scope.invoice = {};
    $scope.initPage = function () {
        if (tag == 'edit') {
            $scope.invoice = appModel.get('invoiceItem');
        }
    };
    $scope.initPage();
    $scope.inputCheckStatus = {};

    var onSuccess = function () {
        $state.go('tab.invoice-list');
    };

    var _updateInvoice = function () {
        server.updateInvoice($scope.invoice).then(function (data) {
            popup.alert({btnText: '确认', msg: '更新开票信息成功!', success: onSuccess});
        });
    };

    var _addInvoice = function () {
        server.addInvoice($scope.invoice).then(function () {
            popup.alert({btnText: '确认', msg: '添加开票信息成功!', success: onSuccess});
        });
    };
    $scope.confirm = function () {
        $scope.invoice.uid = appModel.get('userInfo').uid;
        $scope.invoice.custname = $scope.invoice.receiver;
        if (tag == 'edit') {
            _updateInvoice();
        } else {
            _addInvoice();
        }
    };
    $scope.receiverTelInputKeyUp = function () {
        var receiverTel = $scope.invoice.receivertel;
        var phoneReg = config.regExp.phone;
        $scope.inputCheckStatus.receiverTel = !phoneReg.test(receiverTel);
    };
}]);
app.controller('invoiceListCtrl', ['$scope', '$state', '$ionicHistory', 'server', 'appModel', 'popup',
    function ($scope, $state, $ionicHistory, server, appModel, popup) {

        $scope.invoiceList = null;

        var userId = appModel.get('userInfo').uid;
        $scope.initPage = function () {
            server.getInvoiceList(userId).then(function (data) {
                $scope.invoiceList = data;
            });
        };
        $scope.initPage();

        $scope.editInvoice = function (item) {
            appModel.put('invoiceItem', item);
            $state.go('tab.invoice-edit', {
                tag: 'edit'
            });
        };
        $scope.deleteInvoice = function (item) {
            //console.log(item.iid);
            server.deleteInvoice(item.iid).then(function () {
                popup.alert({btnText: '确认', msg: '删除发票成功!'});
                $scope.initPage();
            });
        };
        $scope.createInvoice = function () {
            $state.go('tab.invoice-edit', {
                tag: 'add'
            });
        };

        $scope.onClick = function (item) {
            var history = $state.params.history;
            if (history == "quote") {
                appModel.put("invoiceDetail", item);
                $ionicHistory.goBack();
            }
        };
    }]);
app.controller('loginCtrl', ['$scope', '$timeout', '$state', 'server', 'appModel', 'popup', 'config',
    function ($scope, $timeout, $state, server, appModel, popup, config) {
        $scope.initPage = function () {
            var userInfo = appModel.get('userInfo');
            if (userInfo) {
                $state.go('tab.index');
            }
        };
        $scope.$on('$ionicView.beforeEnter', function () {
            $scope.initPage();
        });


        $scope.user = {};
        $scope.revise = function () {

            $state.go('tab.revisepwd');
        };
        $scope.zhuce = function () {
            //popup.showMessageBox({msg:'用户名密码错误'});
            $state.go('tab.register');
        };


        $scope.login = function () {
            var phone = $scope.user.uname;
            var phoneReg = config.regExp.phone;
            if (!phoneReg.test(phone)) {
                return popup.showTips('用户名格式不正确！');
            }
            server.login(phone, $scope.user.pwd).then(function (data) {
                appModel.putWithCache('userInfo', data);
                $state.go('tab.index');
            }, function (error) {
                popup.alert({btnText: '确认', msg: '用户名或密码错误!'});
            })
        }
    }]);

app.controller('messageCtrl', ['$scope', 'appModel', 'server', 'popup',
    function ($scope, appModel, server, popup) {

        var reqParam = {
            uid: appModel.get("userInfo").uid,
            rows: 20,
            page: 1
        };
        $scope.messageList = [];
        $scope.initPage = function () {
            server.getMessageList(reqParam).then(function (data) {
                //console.log(data);
                $scope.messageList = data;
            });
        };
        $scope.initPage();

        $scope.readMessage = function (item) {
            if (item.isread == 0) {
                server.readMessage(item.msgid).then(function () {
                    // console.log("success");
                });
            }
            item.isread = 1;
        };

    }]);
app.controller('meCtrl', ['$scope', '$state', 'server', 'appModel', function ($scope, $state, server, appModel) {

    $scope.user = {};

    $scope.initPage = function () {
        var user = appModel.get('userInfo');
        if (angular.isUndefined(user) || user == null) {
            return $scope.goLogin();
        }
        var username = user.username;
        server.getUser(username).then(function (data) {
            $scope.user = data;
            appModel.putWithCache('userInfo', data);
        }, function (error) {

        });
    };

    $scope.goRegister = function () {
        $state.go('tab.register');
    };
    $scope.goLogin = function () {
        appModel.clearUserInfo('userInfo');
        $state.go('tab.login');
    };
    $scope.$on('$ionicView.beforeEnter', function () {
        $scope.initPage();
    })

}]);


app.controller('orderListCtrl', ['$scope', '$state', '$timeout', 'server', 'appModel', function ($scope, $state, $timeout, server, appModel) {

    var userInfo = appModel.get('userInfo');

    $scope.isLoadMore = true;
    $scope.moreDataCanBeLoaded = true;

    var reqParam = {
        uname: userInfo.username,
        rows: 10,
        page: 1
    };

    $scope.hasOrder = false;

    $scope.initPage = function () {
        reqParam.page = 1;
        server.getOrderList(reqParam).then(function (data) {
            $scope.orderList = data.orderList;
            $scope.hasOrder = $scope.orderList.length > 0;
            if ($scope.orderList.length == data.count) {
                $scope.moreDataCanBeLoaded = false;
            }
        });
    };
    $scope.initPage();

    $scope.goDetail = function (oid) {
        $state.go('tab.order-detail', {oid: oid});
    }
    $scope.moreDataCanBeLoaded = function () {
        return false;
    };
    $scope.isLoadMore = true;
    $scope.loadMore = function () {
        reqParam.page++;
        $scope.isLoadMore = false;
        if (!$scope.moreDataCanBeLoaded) {
            return;
        }
        server.getOrderList(reqParam).then(function (data) {
            $scope.orderList = $scope.orderList.concat(data.orderList);
            $scope.$broadcast('scroll.infiniteScrollComplete');
            if ($scope.orderList.length == data.count) {
                $timeout.cancel(timer);
                $scope.moreDataCanBeLoaded = false;
            }
            var timer = $timeout(function () {
                $scope.isLoadMore = true;
            }, 3000);
        });
    };

}]);
app.controller('quoteCtrl', ['$scope', '$state', '$timeout', 'server', 'appModel', 'popup', 'config',
    function ($scope, $state, $timeout, server, appModel, popup, config) {
        var qid = $state.params['qid'];
        $scope.serviceTel = config.serviceTel;
        $scope.vm = {};
        $scope.invoice = {};
        var defaultInvoice = null;
        $scope.user = appModel.get('userInfo');
        var userId = $scope.user.uid;
        $scope.initPage = function () {
            server.getQuoteList(qid).then(function (data) {
                $scope.preOrderList = data.ordPreOrder;
                $scope.quoteDetail = data.quoQuotation;
            });
            var selectedInvoice = appModel.get("invoiceDetail");
            if (angular.isUndefined(selectedInvoice)) {
                server.getInvoiceList(userId).then(function (data) {
                    var invoiceList = data;
                    angular.forEach(invoiceList, function (item) {
                        if (item.isdefault == 1) {
                            defaultInvoice = item;
                        }
                    });
                    $scope.invoice = defaultInvoice;
                });
            }else{
                $scope.invoice = selectedInvoice;
            }

        };

        $scope.$on('$ionicView.beforeEnter', function () {
            $scope.initPage();
        });

        $scope.confirm = function () {
            if ($scope.invoice == null) {
                return popup.showTips('请先选择发票信息!');
            }
            var postParam = {
                iid: $scope.invoice.iid,
                jianyi: $scope.vm.jianyi,
                qid: qid,
                uid: $scope.user.uid,
                ordpreorderid: []
            };
            var priceInValid = false;
            var qtyInValid = false;
            angular.forEach($scope.preOrderList, function (order) {
                if (order.isConfirm) {
                    var o = {
                        poid: order.poid,
                        quoPrice: order.quoPrice,
                        qty: order.newQty || order.qty
                    };
                    if ($scope.user.vip==1&&order._isPriceInValid) {
                        priceInValid = true;
                    }
                    if (order._qtyInValid) {
                        qtyInValid = true;
                    }
                    postParam.ordpreorderid.push(o);
                }
            });
            if ($scope.user.vip == 1 && priceInValid) {
                return popup.showTips('开票价格应大于原价!');
            }
            if (qtyInValid) {
                return popup.showTips('数量应为大于等于1的整数!');
            }
            if (postParam.ordpreorderid.length < 1) {
                return popup.showTips('请先确认报价单!');
            }
            server.updateQuote(postParam).then(function () {
                popup.alert({
                    msg: '报价单更新成功!', success: function () {
                        $state.go('tab.order-list');
                    }
                })
            }, function () {
                popup.alert({btnText: '确认', msg: '更新报价单失败!'});
            });
        };

        $scope.chooseInvoice = function () {
            $state.go('tab.invoice-list', {
                history: "quote"
            });
        };

        $scope.contactUs = function () {
            return popup.showContact();
        };
        $scope.priceKeyUp = function (item) {
            var price = item.quoPrice;
            var moneyReg = config.regExp.money;
            if (!moneyReg.test(price)||price<item.price) {
                item._isPriceInValid = true;
            } else {
                item._isPriceInValid = false;
            }
        };
        $scope.qtyKeyUp = function (item) {
            var qty = item.newQty;
            var qtyReg = config.regExp.quantity;

            if (!qtyReg.test(qty)||qty<1||(item.ptype==1&&qty>item.stock)) {
                item._qtyInValid = true;
            } else {
                item._qtyInValid = false;
            }
        }
    }]);
app.controller('receiptCtrl', ['$scope', '$state', 'server', 'appModel', function ($scope, $state, server, appModel) {

    var uid = appModel.get('userInfo').uid;

    $scope.initPage = function () {
        server.getInvoice(uid).then(function (data) {
            $scope.invoiceList = data;
        })
    };
    $scope.initPage();

}]);


app.controller('registerCtrl', ['$scope', '$interval', '$state', 'server', 'popup', 'config', 'appModel',
    function ($scope, $interval, $state, server, popup, config, appModel) {
        $scope.initPage = function () {
        };
        $scope.user = {referralcode: ''};
        $scope.transmit = "发送验证码";
        $scope.initPage();

        $scope.isVaild = true;
        $scope.timer = 0;
        var maxTime = 60;
        var identifyCode;
        var phoneReg = config.regExp.phone;
        $scope.sendValidateNum = function () {
            var phone = $scope.user.username;
            if (!phoneReg.test(phone)) {
                return popup.showTips('手机号码格式不正确！');
            }
            if ($scope.timer > 0) {
                return;
            }
            if ($scope.isVaild) {
                $scope.timer = maxTime;
                $scope.transmit = "已发送";

                server.gainVerifyCode(phone).then(function (data) {
                    identifyCode = data;
                    popup.showMessageBox({msg: "验证码已发送,请注意查收"});
                    $interval(function () {
                        if ($scope.timer > 0) {
                            $scope.timer--;
                            $scope.transmit = $scope.timer == 0 ? '获取验证码' : '重新发送' + $scope.timer + 's';
                        }
                    }, 1000, maxTime);
                }, function () {
                    popup.showMessageBox({msg: "验证码发送失败,请重新获取"});
                    $scope.transmit = "发送验证码";
                    $scope.timer = 0;
                });
            }
        };
        var flag = true;
        $scope.signIn = function () {
            var phone = $scope.user.username;
            var pwd = $scope.user.pwd;
            var qpwd = $scope.user.qpwd;
            if (!phoneReg.test(phone)) {
                return popup.showTips('手机号码格式不正确！');
            }
            if (pwd !== qpwd) {
                return popup.showTips('两次密码不一致！');
            }
            if ($scope.user.code != identifyCode) {
                return popup.showTips('验证码错误!');
            }
            if (!flag) {
                return;
            }
            var req = {
                uname: $scope.user.username,
                pwd: $scope.user.pwd,
                name: $scope.user.name,
                referralcode: $scope.user.referralcode
            };
            flag = false;
            server.register(req).then(function (data) {
                popup.alert({btnText: '确认', msg: '注册成功!', success: onSuccess});
                function onSuccess() {
                    flag = true;
                    server.login(req.uname, req.pwd).then(function (data) {
                        appModel.putWithCache('userInfo', data);
                        $state.go('tab.sale');
                    }, function (error) {
                        $state.go("tab.login");
                    })
                }
            }, function (error) {
                flag = true;
                popup.alert({btnText: '确认', msg: error.result.success});
            });

        };
        $scope.checkUserUnique = function () {
            var phone = $scope.user.username;
            if (phoneReg.test(phone)) {
                server.checkUserUnique(phone).then(function (data) {
                    $scope.isVaild = true;
                }, function (data) {
                    //console.log("checkUser error" + JSON.stringify(data));
                    $scope.isVaild = true;
                    popup.showTips(error.message);
                })
            } else {
                popup.showTips("用户名格式不正确!");
            }
        }

        $scope.pwdKeyUp = function () {
            var pwd = $scope.user.pwd;
            $scope.user.pwd = pwd.replace(/^\s+|\s+$/g, '');
        };
        $scope.qpwdKeyUp = function () {
            var qpwd = $scope.user.qpwd;
            $scope.user.qpwd = qpwd.replace(/^\s+|\s+$/g, '');
        };
    }]);

app.controller('reqVipCtrl', ['$scope', '$state', 'server', 'fileUpload', 'popup', 'appModel', 'config',
    function ($scope, $state, server, fileUpload, popup, appModel, config) {
        var user = appModel.get('userInfo');
        $scope.req = {};
        $scope.vm = {};
        $scope.vm.file = null;
        var _reqVip = function (req) {
            server.reqVip(req).then(function (data) {
                popup.alert({
                    msg: '申请已提交', success: function () {
                        $state.go('tab.me');
                    }
                });
            }, function () {
                popup.alert({msg: '申请已提交'});
            });
        };

        $scope.isShowUpload = function () {
            return $scope.file == null;
        };
        $scope.clearFile = function () {
            $scope.vm.file = null;
        };
        $scope.commit = function () {
            $scope.req.uid = user.uid;
            $scope.req.username = user.username;
            $scope.req.content = '熟悉品牌：' + $scope.vm.brand + '&&熟悉产品：' + $scope.vm.product;
            var config = {
                files: [$scope.vm.file],
                success: function (data) {
                    if (data.code && data.code == 200 && data.result) {
                        $scope.req.file1 = data.result;
                        _reqVip($scope.req);
                    }
                }, error: function (error) {
                    popup.alert({
                        msg: '需求提交失败!',
                        btnText: '取消'
                    });
                }
            };
            console.log(config);
            console.log($scope.isPhoneInValid + 'isPhone');
            if ($scope.isPhoneInValid) {
                popup.alert({
                    msg: '电话号码不正确！',
                    btnText: '确定'
                });
            } else if ($scope.isWorkDateInValid) {
                popup.alert({
                    msg: '工作年限必须为数字并且不能超过60！',
                    btnText: '确定'
                });
            } else {
                fileUpload.upload(config);
            }
        };

        $scope.phoneInputKeyUp = function () {
            var phoneReg = config.regExp.phone;
            var phone = $scope.req.tel;
            if (!phoneReg.test(phone)) {console.log('true');
                $scope.isPhoneInValid = true;
            } else {console.log('false');
                $scope.isPhoneInValid = false;
            }
        };
        $scope.workDateInputKeyUp = function () {
            var workReg = config.regExp.quantity;
            var workDate = $scope.req.workdate;
            if (!workReg.test(workDate) || parseInt(workDate) < 0 || parseInt(workDate) > 60) {
                $scope.isWorkDateInValid = true;
            } else {
                $scope.isWorkDateInValid = false;
            }
        };
    }]);

app.controller('revisepwdCtrl', ['$scope', '$state', '$timeout', '$interval', 'server', 'popup', 'config',
    function ($scope, $state, $timeout, $interval, server, popup, config) {
        $scope.user = {};
        $scope.transmit = "获取验证码";
        $scope.seriesList = "";
        $scope.timer = 0;
        var maxTime = 60;
        $scope.gainCode = function () {
            $scope.timer = maxTime;
            $scope.transmit = "已发送";
            server.gainVerifyCode($scope.user.uname).then(function (data) {
                $scope.seriesList = data;
            });
            $interval(function () {
                if ($scope.timer > 0) {
                    $scope.timer--;
                    $scope.transmit = $scope.timer == 0 ? '获取验证码' : '重新发送' + $scope.timer + 's';
                }
            }, 1000, maxTime);
        };

        $scope.pwdConsistencyCheck = function () {
            var user = $scope.user;
            return !!user.pwd && !!user.qPwd && user.qPwd == user.pwd;
        };

        var phoneReg = config.regExp.phone;
        $scope.resetPwd = function () {
            var phone = $scope.user.uname;
            if (!phoneReg.test(phone)) {
                return popup.showTips('用户名格式不正确！');
            }
            var pwd = $scope.user.pwd;
            var qpwd = $scope.user.qPwd;
            if (pwd !== qpwd) {
                return popup.showTips('两次密码不一致！');
            }
            var param = {
                uname: phone,
                pwd: pwd,
                code: $scope.user.code
            };

            server.resetPassword(param).then(function (data) {
                popup.alert({
                    btnText: '确认', msg: '密码修改成功!', success: function () {
                        $state.go('tab.login');
                    }
                });
            }, function (err) {
                popup.alert({msg: err.message});
            })

        };

        $scope.pwdKeyUp = function () {
            var pwd = $scope.user.pwd;
            $scope.user.pwd = pwd.replace(/^\s+|\s+$/g, '');
        };
        $scope.qpwdKeyUp = function () {
            var qpwd = $scope.user.qPwd;
            $scope.user.qPwd = qpwd.replace(/^\s+|\s+$/g, '');
        };
    }]);
app.controller('changepwdCtrl', ['$scope', '$state', '$timeout', 'appModel', 'server', 'popup',
    function ($scope, $state, $timeout, appModel, server, popup) {
        $scope.user = {};
        var u = appModel.get('userInfo');

        $scope.pwdConsistencyCheck = function () {
            var user = $scope.user;
            return !!user.pwd && !!user.qPwd && user.qPwd == user.pwd;
        };

        $scope.resetPwd = function () {
            if ($scope.user.oldPwd != u.pwd) {
                return popup.alert({msg: '密码有误!'});
            }
            if ($scope.user.pwd == u.pwd) {
                return popup.alert({msg: '新密码与旧密码一致!'});
            }
            if ($scope.user.pwd != $scope.user.qpwd) {
                return popup.alert({msg: '两次密码不一致!'});
            }
            var param = {
                uname: $scope.user.oldPwd,
                pwd: $scope.user.pwd,
                code: $scope.user.code
            };

            server.resetPassword(param).then(function (data) {
                $scope.seriesList = data.identifyCode;
                popup.alert({btnText: '确认', msg: '密码修改成功!'}).then(function () {
                    $state.go('tab.login');
                });
            })

        };

        /* $scope.goProductDetail = function () {
         if ($scope.countdown == 0) {
         $scope.transmit = "重新发送";
         $scope.countdown = 60;
         } else {
         $scope.countdown = $scope.countdown - 1;

         $scope.transmit = "重发" + $scope.countdown;
         $timeout(function () {
         $scope.goProductDetail();
         }, 1000);

         }
         };
         $scope.gomima = function () {
         alert("验证码为" + $scope.seriesList + "code为" + $scope.user.code);
         if ($scope.seriesList === $scope.user.code) {

         } else {
         alert("验证码错误请重新输入");
         }
         }*/

    }]);
app.controller('suggestionCtrl', ['$scope', '$state', 'server', 'appModel', 'popup',
    function ($scope, $state, server, appModel, popup) {

        $scope.vm = {
            uid: appModel.get('userInfo').uid
        };
        $scope.initPage = function () {
        };
        $scope.initPage();
        $scope.commitSuggestion = function () {
            var suggest = $scope.vm.suggest;
            if (suggest && suggest.trim() != "") {
                server.commitSuggestion($scope.vm).then(function () {
                    popup.alert({
                        btnText: '确认', msg: '建议已提交!', success: function () {
                            $state.go('tab.me');
                        }
                    });
                }, function () {
                    popup.alert({btnText: '确认', msg: '建议提交失败!'});
                });
            }
        };
    }]);
app.controller('productBrandCtrl', ['$scope', '$state', 'server', 'appModel', 'config', function ($scope, $state, server, appModel, config) {

    var reqParam = {
        type: config.dictType.brand,
        rows: 20,
        page: 1,
        parentId: appModel.get('productSort').did
    };
    $scope.vm = {};
    $scope.imgUrl = config.imgUrl;

    $scope.initPage = function () {
        server.getPreList().then(function (data) {
            $scope.brandPreList = data;
        });
        server.getProductDictList(reqParam).then(function (data) {
            $scope.brandList = data;
        });
    };

    $scope.filter = function (item) {
        var param = {
            type: reqParam.type,
            rows: 20,
            page: 1,
            pre: item.pre,
            parentId: reqParam.parentId
        };
        $scope.vm.status = 0;
        server.getProductDictList(param).then(function (data) {
            $scope.brandList = data;
        });
    };

    $scope.initPage();
    $scope.goSeries = function (item) {
        appModel.put('productBrand', item);
        var reqSeriesParam = {
            type: config.dictType.series,
            rows: 20,
            page: 1,
            parentId: item.did
        };
        server.getProductDictList(reqSeriesParam).then(function (data) {
            var productSeriesList = data;
            if (productSeriesList.length < 1) {
                appModel.put('productSeries', {})
                $state.go('tab.product-demand-form', {tag: 'common'});
            } else {
                appModel.put('productSeriesList', productSeriesList)
                $state.go("tab.product-series");
            }

        }, function (error) {
            //console.log('error' + error);
        })

    };
}]);
app.controller('productBrandPreCtrl', ['$scope', '$state', 'server', 'appModel', 'config',
    function ($scope, $state, server, appModel, config) {

        var reqParam = {
            type: config.dictType.brand,
            rows: 20,
            page: 1
        };

        $scope.initPage = function () {
            /*var productSort=appModel.get("productSort");
             server.getProductBrandPre().then(function (data) {
             $scope.brandPreList = data;
             });*/

            server.getProductDictList(reqParam).then(function (data) {
                $scope.brandPreList = data;
            });
        };

        $scope.initPage();

        $scope.goBrand = function (item) {
            appModel.put("productBrandPre", item);
            $state.go("tab.product-brand");
        };
    }]);
app.controller('productDemandFormCtrl', ['$scope', '$stateParams', '$state', '$ionicScrollDelegate', '$timeout', 'server', 'fileUpload', 'appModel', 'config', 'popup',
    function ($scope, $stateParams, $state, $ionicScrollDelegate, $timeout, server, fileUpload, appModel, config, popup) {

        var tag = $stateParams.tag;
        $scope.config = config;

        $scope.extraFiles = [];
        $scope.product = null;

        $scope.vm = {
            file: null
        };

        $scope.pType = 0;
        var product = null;

        function getProductDetail() {
            product = appModel.get("productDetail");
            $scope.product = product;
            $scope.productDemand = {
                brandname: product.brandname,
                seriesname: product.seriesname,
                sortname: product.sortname,
                qty: 1,
                psid: product.psid,
                productname: product.productname,
                price: product.price,
                ptype: product.ptype,
                modelname: product.modelname,
                remark: ""
            }
        }

        function getCommonProduct() {
            var productSort = appModel.get("productSort");
            var productSeries = appModel.get("productSeries");
            var productBrand = appModel.get("productBrand");
            $scope.productDemand = {
                brandname: productBrand.dictname,
                seriesname: productSeries.dictname,
                sortname: productSort.dictname,
                uid: "",
                qty: '',
                psid: "",
                productname: "",
                price: "",
                ptype: 3,
                modelname: "",
                remark: ""
            };
            $scope.tag.isCommon = true;
        }

        $scope.$on('$ionicView.beforeEnter', function () {
            $scope.tag = {};
            $scope.initPage();
        });

        $scope.initPage = function () {
            switch (tag) {
                case 'product':
                    getProductDetail();
                    break;
                case 'sale':
                    getProductDetail();
                    break;
                case 'common':
                    getCommonProduct();
                    break;
                default:
                    $scope.productDemand = {
                        productname: null
                    };
                    $scope.tag.isFast = true;
            }
            $scope.productDemand.ptype = $scope.productDemand.ptype || 3;
            $scope.productDemand.uid = appModel.get('userInfo').uid;
            $scope.productDemand.qty = appModel.get('preOrderNum') || 1;
            $scope.tag.isSale = $scope.productDemand.ptype == 1;
        };

        $scope.$watch('vm.file', function () {
            var file = $scope.vm.file;
            if (file != null) {
                $scope.extraFiles.push(file);
                $scope.vm.file = null;
            }
            $timeout(function () {
                $ionicScrollDelegate.resize();
            }, 500);

        });

        var _createDemand = function (demand) {
            server.createDemand(demand).then(function () {
                popup.alert({
                    msg: '需求提交成功!',
                    btnText: '返回首页',
                    success: function () {
                        $state.go('tab.guide');
                    }
                });
            }, function (error) {
                popup.alert({
                    msg: '需求提交失败!',
                    btnText: '取消'
                });
            })
        };

        $scope.commit = function () {
            var demand = $scope.productDemand;
            var qty = $scope.productDemand.qty;
            var qtyReg = $scope.config.regExp.quantity;

            if (tag == 'product' || tag == 'sale') {
                if (!qtyReg.test(qty)) {
                    return popup.showTips("数量格式不正确！");
                }
                if (demand.ptype==1&&qty > product.stock) {
                    return popup.showTips("需求数量不能大于库存数量！");
                }
            }
            if ($scope.extraFiles.length > 0) {
                var config = {
                    files: $scope.extraFiles,
                    success: function (data) {
                        if (data.code && data.code == 200 && data.result) {
                            $scope.productDemand.fileid = data.result;
                            _createDemand($scope.productDemand);
                        }
                    }, error: function (error) {
                        popup.alert({
                            msg: '需求提交失败!',
                            btnText: '取消'
                        });
                    }
                };
                fileUpload.upload(config);
            } else {
                _createDemand($scope.productDemand);
            }


        };

        $scope.isShowUploadBtn = function () {
            return $scope.extraFiles.length < 3 && $scope.productDemand && $scope.productDemand.ptype != 1;
        };

        $scope.$watch('productDemand', function () {
            var p = $scope.productDemand;
            p.brandname = p.brandname || '';
            p.productname = p.productname || '';
            p.modelname = p.modelname || '';
            $scope.formDisabled =
                p.brandname == ''
                && p.productname == ''
                && p.modelname == '';
        }, true);

        $scope.qtyKeyUp = function () {
            var qty = $scope.productDemand.qty;
            var qtyReg = config.regExp.quantity;
            $scope.isQtyInvalid = !qtyReg.test(qty);
        };

        $scope.clearFiles = function () {
            $scope.extraFiles = [];
        };

        $scope.changeFile = function (index) {
            $scope.extraFiles[index] = $scope.vm.img;
            $scope.vm.img = null;
        };

        //当为图片时显示
        var allowedFileTypes = ["image/png", "image/jpeg", "image/gif"];
        $scope.isImage = function (item) {
            return allowedFileTypes.indexOf(item.type) > -1;
        };

        $scope.minus = function () {
            $scope.productDemand.qty > 1 && $scope.productDemand.qty--;
        };
        $scope.add = function () {
            $scope.productDemand.qty < 999 && $scope.productDemand.qty++;
        };

    }]);
app.controller('productDetailCtrl', ['$scope', '$stateParams', '$state', '$filter', 'server', 'wechat', 'appModel', 'popup', 'config','$ionicHistory',
    function ($scope, $stateParams, $state, $filter, server, wechat, appModel, popup, config,$ionicHistory) {
        var psid = $stateParams.psid;
        $scope.imgUrl = config.imgUrl;
        $scope.vm = {};

        $scope.vm.num = 1;
        var currenyFilter = $filter('currency');
        $scope.initPage = function () {
            server.getProductDetail(psid).then(function (data) {
                $scope.productDetail = data[0];
                var shareData = {
                        title: $scope.productDetail.productname,
                        imgUrl: $scope.imgUrl + $scope.productDetail.imgurl,
                        desc: '价格:￥' + $scope.productDetail.price + '  ' +
                        $scope.productDetail.describemodel
                    };
                wechat.share(shareData);
                //console.log($scope.productDetail);
            });
        };
        $scope.initPage();

        $scope.createReq = function (item) {
            $ionicHistory.clearHistory();
            appModel.put('productDetail', item);
            appModel.put('preOrderNum', $scope.vm.num);
            if (item.ptype == config.productType.sale) {
                $state.go('tab.product-demand-form', {
                    tag: 'product'
                });
            }
            if (item.ptype == config.productType.recommend) {
                $state.go('tab.product-demand-form', {
                    tag: 'product'
                });
            }
        };

        $scope.minus = function () {
            $scope.vm.num > 1 && $scope.vm.num--;
        };
        $scope.add = function () {
            var p = $scope.productDetail;
            if (p.ptye == config.productType.recommend) {
                return $scope.vm.num++;
            }
            if ($scope.vm.num < p.stock) {
                $scope.vm.num++
            } else {
                return popup.alert({msg: '需求数量不能超过库存数量!'});
            }
        };
    }]);

app.controller('productSeriesCtrl', ['$scope', '$state', '$ionicHistory', '$rootScope', 'server', 'appModel', 'config', function ($scope, $state, $ionicHistory, $rootScope, server, appModel, config) {

    $scope.initPage = function () {
        $scope.productSeriesList = appModel.get('productSeriesList');
    };

    $scope.$on('$ionicView.beforeEnter', function () {
        $scope.initPage();
    });

    $scope.goProductDemandForm = function (item) {
        appModel.put('productSeries', item);
        $state.go('tab.product-demand-form', {tag: 'common'});
    };
}]);
app.controller('productSortCtrl', ['$scope', '$state', 'server', 'appModel', "config", function ($scope, $state, server, appModel, config) {

    var reqParam = {
        type: config.dictType.sort,
        rows: 20,
        page: 1
    };
    $scope.imgUrl = config.imgUrl;

    $scope.initPage = function () {
        server.getProductDictList(reqParam).then(function (data) {
            $scope.productSortList = data;
        });
    };

    $scope.initPage();

    $scope.goBrandPre = function (productSort) {
        appModel.put("productSort", productSort);
        $state.go("tab.product-brand");
    };

    $scope.moreDataCanBeLoaded = function () {
        return false;
    };

    $scope.loadMore = function () {
        reqParam.rows += reqParam.page;
        server.getProductDictList(reqParam).then(function (data) {
            $scope.productSortList.push(data);
        });
    };
}]);
app.controller('recommendCtrl', ['$scope', '$timeout', '$state', 'server', 'config', function ($scope, $timeout, $state, server, config) {

    var reqParam = {
        type: config.productType.recommend,
        page: 1,
        rows: 20
    };

    $scope.isLoadMore = true;
    $scope.moreDataCanBeLoaded = true;
    $scope.imgUrl = config.imgUrl;
    $scope.vm = {};

    $scope.initPage = function () {
        reqParam.page = 1;
        server.getProductList(reqParam).then(function (data) {
            $scope.productList = data.productList;
            $scope.moreDataCanBeLoaded = !($scope.productList.length == data.count);
        });
    };
    $scope.search = function () {
        delete reqParam.keywords;//移除原有的keywords
        if($scope.vm.keywords!=""){
            reqParam.keywords = $scope.vm.keywords;
        }
        $scope.initPage();
    };
    $scope.$watch('vm.keywords', function (newVal, oldValue) {
        if (oldValue && newVal == "") {
            $scope.search();
        }
    });

    $scope.initPage();

    $scope.loadMore = function () {
        reqParam.page++;
        $scope.isLoadMore = false;
        if (!$scope.moreDataCanBeLoaded) {
            return;
        }
        server.getProductList(reqParam).then(function (data) {
            var newProductList = $scope.productList.concat(data.productList);
            $scope.productList = newProductList;
            $scope.$broadcast('scroll.infiniteScrollComplete');
            if ($scope.productList.length == data.count) {
                $timeout.cancel(timer);
                $scope.moreDataCanBeLoaded = false;
            }
            var timer = $timeout(function () {
                $scope.isLoadMore = true;
            }, 3000);
        });
    };

    $scope.goProductDetail = function (item) {
        $state.go('tab.product-detail', {psid: item.psid});
    };
}]);
app.controller('saleCtrl', ['$scope', '$timeout', '$state', 'server', 'config', 'appModel',
    function ($scope, $timeout, $state, server, config, appModel) {

        var reqParam = {
            type: config.productType.sale,
            page: 1,
            rows: 20
        };

        $scope.isLoadMore = true;
        $scope.moreDataCanBeLoaded = true;

        $scope.imgUrl = config.imgUrl;
        $scope.vm = {};

        $scope.initPage = function () {
            reqParam.page = 1;
            server.getProductList(reqParam).then(function (data) {
                $scope.productList = data.productList;
                $scope.moreDataCanBeLoaded=!($scope.productList.length == data.count);
            });
        };
        $scope.search = function () {
            delete reqParam.keywords;//移除原有的keywords
            if($scope.vm.keywords!=""){
                reqParam.keywords = $scope.vm.keywords;
            }
            $scope.initPage();
        };
        $scope.$watch('vm.keywords', function (newVal, oldValue) {
            if (oldValue && newVal == "") {
                $scope.search();
            }
        });

        $scope.initPage();

        $scope.itemClick = function (item) {
            $state.go('tab.product-detail',{psid: item.psid});
        };

        $scope.loadMore = function () {
            reqParam.page++;
            $scope.isLoadMore = false;
            if (!$scope.moreDataCanBeLoaded) {
                return;
            }
            server.getProductList(reqParam).then(function (data) {
                var newProductList = $scope.productList.concat(data.productList);
                $scope.productList = newProductList;
                $scope.$broadcast('scroll.infiniteScrollComplete');
                if ($scope.productList.length == data.count) {
                    $timeout.cancel(timer);
                    $scope.moreDataCanBeLoaded = false;
                }
                var timer = $timeout(function () {
                    $scope.isLoadMore = true;
                }, 3000);
            });
        };
    }]);
// addjs
app.controller('withdrawCtrl', ['$scope', '$timeout', '$state', 'server', 'config', 'appModel',
    function ($scope, $timeout, $state, server, config, appModel) {

        var Popup=document.getElementById('zhifuShow');
        var ZhifuContent=document.getElementById('zhifuContent');
        var Weixin = document.getElementById('weixin');
        var Zhifubao = document.getElementById('zhifubao');
        var VerificationBtn = document.getElementById('verificationBtn');
        var CountDown = document.getElementById('countDown');
        var show = true;
        var time = 60
        Weixin.style.display = 'none';
        CountDown.style.display = 'none'

        function zhifuShow(){
            if (show) {
                Popup.className ="icon ion-chevron-down";
                ZhifuContent.style.display = 'block'
                show = false
            }
            else {
                Popup.className ="icon ion-chevron-right";
                ZhifuContent.style.display = 'none'
                show = true
            }
        }
        function weixinBtn(){
            Weixin.style.display = 'block';
            Zhifubao.style.display = 'none'
        }
        function zhifubaoBtn(){
            Weixin.style.display = 'none';
            Zhifubao.style.display = 'block'
        }
        function verificationBtn(){
            time = 60;
            CountDown.innerHTML = time + 's'
            VerificationBtn.style.display = 'none';
            CountDown.style.display = 'block';
            timer = setInterval("timeBack()", 1000);

        }
        function timeBack(){
            if (time>1) {
                time --
                CountDown.innerHTML = time + 's'

            }else {
                VerificationBtn.style.display = 'block';
                CountDown.style.display = 'none';
                clearInterval(timer)
            }
        }

    }]);
app.controller('indexPaopaoCtrl', ['$scope', '$timeout', '$state', 'server', 'config', 'appModel',
    function ($scope, $timeout, $state, server, config, appModel) {
        var paopaoBox=document.getElementById('paopaoBox');
        server.getPointRanking(appModel.get("userInfo").uid).then(function (data) {
            // 气泡列表
            $scope.pointBalloonList = data.pointBalloonList
            // 用户信息
            $scope.userAgent = data.userAgent
            // 积分排行列表
            $scope.userAgentList = data.userAgentList
            for (var i=0;i<$scope.userAgentList.length;i++)
            {
                var boxWidth = document.body.offsetWidth
                var itemWidth = Math.ceil(Math.random()*(boxWidth-60));
                var itemHeight = Math.ceil(Math.random()*230);
                while(true){
                    if (itemWidth+60>(boxWidth/2-30)&itemWidth<(boxWidth/2+30)&itemHeight+105>110&itemHeight<215) {
                        itemWidth = Math.ceil(Math.random()*(boxWidth-60));
                        itemHeight = Math.ceil(Math.random()*230);
                    }else {break}
                }
                $scope.userAgentList[i].itemWidth = itemWidth
                $scope.userAgentList[i].itemHeight = itemHeight
            }
            console.log($scope.userAgentList);
        });

    }]);
// 我的任务
app.controller('MyTaskListCtrl', ['$scope', '$timeout', '$state', 'server', 'config', 'appModel',
    function ($scope, $timeout, $state, server, config, appModel) {

        var taskItem = '';
        $scope.showPopup = true;
    $scope.toMyTaskDetail = function (item) {
        if (item.status!=5) {
            $state.go('tab.MyTaskDetail',{psid: item.jid});
        }

    };
    $scope.btnGiveUpTask = function (item) {
        $scope.taskJid = item.jid;
        $scope.showPopup = !$scope.showPopup;
    };
    // 放弃任务
    $scope.giveUpTask = function () {
        console.log($scope.taskItem);
        server.getGiveUpTask($scope.taskJid).then(function (data) {
            console.log($scope.taskItem);
        });
    };
    var reqParam = {
        uid: appModel.get("userInfo").uid,
        rows: 20,
        page: 1
    };
    $scope.isLoadMore = true;
    $scope.moreDataCanBeLoaded = true;
    $scope.initPage = function () {
        reqParam.page = 1;
        server.getMyTaskList(reqParam).then(function (data) {
            $scope.taskList = data;
            console.log(data);
            $scope.moreDataCanBeLoaded=!($scope.taskList.length < reqParam.rows);
            console.log($scope.taskList.length);
            console.log($scope.moreDataCanBeLoaded);
        });
    };
    $scope.initPage();
    $scope.loadMore = function () {
        reqParam.page++;
        $scope.isLoadMore = false;
        if (!$scope.moreDataCanBeLoaded) {
            return;
        }
        server.getTaskList(reqParam).then(function (data) {
            var newTaskList = $scope.taskList.concat(data);
            console.log(data);
            $scope.taskList = newTaskList;
            $scope.$broadcast('scroll.infiniteScrollComplete');
            if ($scope.taskList.length%reqParam.rows !=0) {
                $timeout.cancel(timer);
                $scope.moreDataCanBeLoaded = false;
            }
            var timer = $timeout(function () {
                $scope.isLoadMore = true;
            }, 3000);
        });
    };
}]);
app.controller('MyTaskDetailCtrl', ['$scope', '$stateParams', '$state', '$filter', 'server', 'wechat', 'appModel', 'popup', 'config','$ionicHistory',
    function ($scope, $stateParams, $state, $filter, server, wechat, appModel, popup, config,$ionicHistory) {
        var psid = $stateParams.psid;
        console.log(psid);
        var currenyFilter = $filter('currency');
        $scope.initPage = function () {
            server.getTaskDetail(psid).then(function (data) {
                $scope.TaskDetail = data;
                console.log(data.name);
            });
        };
        $scope.initPage();
    }]);
//任务列表
app.controller('tackDetailsCtrl', ['$scope', '$stateParams', '$state', '$filter', 'server', 'wechat', 'appModel', 'popup', 'config','$ionicHistory',
    function ($scope, $stateParams, $state, $filter, server, wechat, appModel, popup, config,$ionicHistory) {
        var psid = $stateParams.psid;
        $scope.psid = $stateParams.psid;
        $scope.showPopup = true;
        $scope.punishmentPopup = true;
        var currenyFilter = $filter('currency');
        $scope.initPage = function () {
            server.getTaskDetail(psid).then(function (data) {
                $scope.TaskDetail = data;
            });
        };
        // 获取是否有惩罚
        server.getPunishment(appModel.get("userInfo").uid).then(function (data) {
            if (data!=0) {
                $scope.punishmentPopup = !$scope.punishmentPopup;
            }
        });
        // 判断是否需要申请经纪人
        $scope.receiveTask = function (psid) {
            console.log(appModel.get("userInfo").isEngineer);
            console.log(appModel.get("userInfo").vip==1);
            if (appModel.get("userInfo").isEngineer||appModel.get("userInfo").vip==1) {
                $state.go('tab.jobSuccess',{jobId: psid});
            }else {
                $scope.showPopup = !$scope.showPopup;
            }
        };

        $scope.initPage();
    }]);
app.controller('taskListCtrl', ['$scope', '$timeout', '$state', 'server', 'config', 'appModel',
    function ($scope, $timeout, $state, server, config, appModel) {
    var reqParam = {
        rows: 20,
        page: 1
    };
    $scope.toTaskDetail = function (item) {
        $state.go('tab.tackDetails',{psid: item});
    };

    $scope.isLoadMore = true;
    $scope.moreDataCanBeLoaded = true;
    $scope.initPage = function () {
        reqParam.page = 1;
        server.getTaskList(reqParam).then(function (data) {
            $scope.taskList = data;
            // console.log(data);
            $scope.moreDataCanBeLoaded=!($scope.taskList.length < reqParam.rows);
            console.log($scope.taskList.length);
            console.log($scope.moreDataCanBeLoaded);
        });
    };

    $scope.initPage();

    $scope.loadMore = function () {
        reqParam.page++;
        $scope.isLoadMore = false;
        if (!$scope.moreDataCanBeLoaded) {
            return;
        }
        server.getTaskList(reqParam).then(function (data) {
            var newTaskList = $scope.taskList.concat(data);
            // console.log(data);
            $scope.taskList = newTaskList;
            $scope.$broadcast('scroll.infiniteScrollComplete');
            if ($scope.taskList.length%reqParam.rows !=0) {
                $timeout.cancel(timer);
                $scope.moreDataCanBeLoaded = false;
            }
            var timer = $timeout(function () {
                $scope.isLoadMore = true;
            }, 3000);
        });
    };
}]);
// 领取任务
app.controller('jobSuccessCtrl', ['$scope','$stateParams', '$interval', '$state', 'server', 'popup', 'config', 'appModel',
    function ($scope, $stateParams, $interval, $state, server, popup, config, appModel) {
        $scope.jobId =  $stateParams.jobId;
        $scope.toTaskDetail = function (item) {
            $state.go('tab.tackDetails',{psid: item});
        };
        $scope.initPage = function () {
        };
        $scope.user = {referralcode: ''};
        $scope.initPage();

        var phoneReg = config.regExp.phone;
        $scope.signIn = function () {
            var username = $scope.user.username;
            var mobile = $scope.user.mobile;
            var cardNo = $scope.user.cardNo;
            var reg = /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/;
            if (!phoneReg.test(mobile)) {
                return popup.showTips('手机号码格式不正确！');
            }else if(reg.test(cardNo) === false)
            {
                return popup.showTips('身份证格式不正确！');
            }else {
                var req = {
                    jobId: $scope.jobId,
                    uid:appModel.get("userInfo").uid,
                    username: $scope.user.username,
                    mobile: $scope.user.mobile,
                    cardNo: $scope.user.cardNo,
                };
                server.getJobSuccess(req).then(function (data) {
                    if (data==1) {
                        $state.go('tab.tackSuccess');
                    }else {
                        return popup.showTips('领取任务失败，请重试！');
                    }
                });
            }

        };

    }]);



/**
 * API
 */
core.service('api', ['$http', '$q', '$ionicLoading', 'config', function ($http, $q, $ionicLoading, config) {

    var self = this;
    /**
     * call API from server.
     * @param {string} interfaceName
     * @param {object} [param]
     * @param {string} [method]
     * @param {boolean} isShowLoading
     * @returns {ng.IPromise}
     */
    this.call = function (interfaceName, param, method, isShowLoading) {

        if (isShowLoading) {
            $ionicLoading.show();
        }
        var defer = $q.defer();

        var url = config.endpoint + interfaceName;
        var data = null;

        if (!method) {
            method = 'GET';
        } else {
            method = method.toUpperCase();
        }
        switch (method) {
            case 'GET':
            case 'DELETE':
                if (param) {
                    url += '?$JsonQuery=' + JSON.stringify(param);
                }
                break;
            case 'POST':
            case 'PUT':
                data = param;
                break;
            default:
                defer.reject('invalid method');
        }

        $http({
            method: method,
            url: url,
            data: data,
            config: {'Content-Type': 'application/json'}
        }).then(function (httpResponse) {
            var respData = httpResponse.data;
            var resp = respData.result;
            if (respData && respData.code && respData.code == 200) {
                defer.resolve(resp);
            } else {
                defer.reject(respData);
            }
            $ionicLoading.hide();
        }, function (httpResponse) {
            var rsp = null;
            var respData = httpResponse.data ? httpResponse.data : null;
            if (respData && respData.result) {
                respData = respData.result;
            }
            if (respData && respData.message) {
                rsp = respData.message;
            }
            $ionicLoading.hide();
            defer.reject(rsp);
        });

        return defer.promise;
    };
}]);

app.filter('orderStatusFilter', function () {
    return function (value) {
        switch (value) {
            case -1:
                return '订单已取消';
            case 0:
                return '订单已提交';
            case 1:
                return '订单受理中';
            case 2:
                return '报价单已生成';
            case 3:
                return '报价单已确认';
            case 5:
                return '报价已完成';
        }
    };
});

app.filter('preOrderStatusFilter', function () {
    return function (value) {
        switch (value) {
            case 0:
                return '预订单已生成';

            case 5:
                return '预订单已完成';
        }
    }
});

app.filter('quoteStatusFilter', function () {
    return function (value) {
        switch (value) {
            case -1:
                return '报价单已作废';
            case 0:
                return '报价单已生成';
            case 1:
                return '报价单已确认';
            case 3:
                return '报价单已完成';
        }
    }
});

app.filter('preFilter', function () {
    return function (obj, compare) {
        var newArr = [];
        compare = compare || '[A-Z]';
        angular.forEach(obj, function (o) {
            if (new RegExp(compare, "gi").exec(o.pre[0])) {
                newArr.push(o);
            }
        });
        return newArr;
    }
});
app.filter('deliveryTimeFilter', function () {
    return function (value) {
        switch (value) {
            case '1':
                return '特价';
            case '2':
                return '推荐';
            case '3':
                return '产品';
        }
    }
});

app.filter('pTypeFilter', function () {
    return function (value) {
        switch (value) {
            case 1:
                return '特价产品';
            case 2:
                return '推荐产品';
            case 3:
                return '普通产品';
        }
    }
});
app.service("appModel", ['db', function (db) {
    var _self = this;
    this.transferObj = {};
    /**
     * 存储值
     * @param key
     * @param value
     */
    this.put = function (key, value) {
        /*if(_self.transferObj.hasOwnProperty(key)){
         throw new Error("对应的key:"+key+"已存在!");
         }*/
        _self.transferObj[key] = value;
    };

    /**
     * 存储到本地
     * @param key
     * @param value
     */
    this.putWithCache = function (key, value) {
        _self.transferObj[key] = value;
        db.save(key, value);
    };

    this.clearUserInfo = function (key) {
        _self.transferObj[key] = null;
        db.remove(key);
    };

    /**
     * 获取储存的值
     * @param {string} key
     * @returns {*}
     */
    this.get = function (key) {
        return db.read(key) || this.transferObj[key];
    };

}]);
/**
 * 本地数据存储
 */
core.service('db', function () {
    /**
     * @param {string} key
     * @returns {*}
     */
    this.read = function (key) {
        return JSON.parse(localStorage.getItem(key));
    };

    /**
     * @param {string} key
     * @param {*} value
     */
    this.save = function (key, value) {
        localStorage.setItem(key, JSON.stringify(value))
    };

    /**
     * @param {string} key
     */
    this.remove = function (key) {
        localStorage.removeItem(key);
    };

    this.clear = function () {
        localStorage.clear();
    };

});

core.service('fileUpload', ['$ionicLoading', 'Upload', 'config', function ($ionicLoading, Upload, config) {
    /**
     *
     * @param config {data:{*},files:File,success:fn,error:fn,progress:fn,isShowLoading:Boolean}
     */
    this.upload = function (param) {
        var isShowLoading = param.isShowLoading || true;
        if (isShowLoading) {
            $ionicLoading.show();
        }
        var upload = Upload.upload({
            url: config.endpoint + config.productDemandFileUpload,
            method: 'POST',
            data: {files: param.files}
        });
        // headers: {
        //     "Content-Type": "multipart/form-data"
        // },

        //alert(url)
        //alert(JSON.stringify(param));

        upload.then(function (response) {
            if (response.status == 200) {
                if (200 == response.data.code) {
                    param.success && param.success(response.data);
                }
            }
        }, function (response) {
            param.error && param.error(response.data);
        });
        upload.progress(function (evt) {
            //进度
            param.progress && param.progress(evt);
        });
        upload.finally(function () {
            if (isShowLoading) {
                $ionicLoading.hide();
            }
        })
    }
}]);

core.service('popup', ['$ionicPopup', '$ionicModal', '$timeout', '$rootScope', 'server',
    function ($ionicPopup, $ionicModal, $timeout, $rootScope, server) {

        var template = '<div class="{{_vm.cssName}}">{{_vm.msg}}</div>';

        $rootScope.modal = $ionicModal.fromTemplate(template, {
            scope: $rootScope,
            animation: 'slide-in-up'
        });

        var phone = '';
        var init = function () {
            server.getSysConfig().then(function (data) {
                phone = data.tel;
            });
        };
        init();//initial phone
        this.alert = function (param) {
            $ionicPopup.alert({
                okText: param.btnText || '确认',
                template: '<p class="text-center font20">' + param.msg + '</p>'
            }).then(function () {
                param.success && param.success();
            });
        };
        this.showMessageBox = function (param) {
            $rootScope.msgBox = {};
            var msg = $rootScope.msgBox;
            msg.msgShow = true;
            msg.msgActive = 'active';
            msg.content = param.msg;
            $timeout(function () {
                msg.msgShow = false;
            }, 2500);
        };
        this.showContact = function () {
            $ionicPopup.alert({
                title: '联系客服',
                template: '<p class="text-center font20">' +
                '<a style="text-decoration: none" href="tel:' + phone + '">' +
                '<i class="ion-ios-telephone" style="font-size: 24px;vertical-align: -3px;margin-right: 5px"></i>' +
                '' + phone + '</a></p>',
                btnText: ''
            });
        };

        /**
         * 显示提示消息框
         * @param msg 提示信息
         * @param time 提示信息显示时间,默认2s后消失
         * @param cssName 用于显示className，多个
         * class使用空格隔开，默认样式为tip-box
         */
        this.showTips = function (msg, time, cssName) {
            time = time || 2000;
            cssName = cssName || 'tip-box';
            $rootScope._vm = {};
            $rootScope._vm.msg = msg;
            $rootScope._vm.cssName = cssName;
            $timeout(function () {
                $rootScope.modal.hide();
            }, time);
            $rootScope.modal.show();
        };
    }]);

core.service('server', ['$state', 'api', 'config', 'appModel', '$ionicHistory',
    function ($state, api, config, appModel, $ionicHistory) {

        var _self = this;

        var init = function () {
            var configId = 1;//固定的ID
            api.call(config.getSysConfig + "?configId=" + configId, null, "GET", false).then(function (data) {
                config.serviceTel = data.tel;
            });
            var user = appModel.get('userInfo');
            if (angular.isUndefined(user)) {
                $state.go('tab.login');
                $ionicHistory.clearHistory();
            }
        };
        init();

        /**
         * 获取产品字典列表
         * @param {Number} type
         * @param {Number} row
         * @param {Number} page
         * @param {String} pre
         */
        this.getProductDictList = function (param) {
            var type = param.type || 1;
            var rows = param.rows || 1;
            var page = param.page || 20;
            var parentId = param.parentId;
            var pre = param.pre;
            var url = config.endpoint + config.getProductDictList + '?type=' + type + '&rows=' + rows + '&page=' + page;
            if (pre) {
                url += "&pre=" + pre;
            }
            if (parentId) {
                url += "&parentId=" + parentId;
            }
            return api.call(url, null, 'GET', true);
        };

        this.getProductList = function (param) {
            var type = param.type || 1;
            var rows = param.rows || 1;
            var page = param.page || 20;
            var keywords = param.keywords;
            var url = config.endpoint + config.getProductList + '?type=' + type + '&rows=' + rows + '&page=' + page;
            if (keywords) {
                url += '&keywords=' + keywords;
            }
            return api.call(url, null, 'GET', true);
        };

        this.getProductDetail = function (psid) {
            var url = config.endpoint + config.getProductDetail + '?psid=' + psid;
            return api.call(url, null, 'GET', true);
        };

        this.getRegister = function (request) {
            var request = "?uname=" + request.uname + "&pwd=" + request.pwd + "&name=" + request.name;
            return api.call(config.getRegister + request, null, 'POST', true);
        };
        this.register = function (req) {
            var param = "?uname=" + req.uname +
                "&pwd=" + req.pwd +
                "&name=" + req.name +
                "&referralcode=" + req.referralcode;
            return api.call(config.register + param, null, 'POST', true);
        };

        this.gainVerifyCode = function (phone) {
            return api.call(config.getfasong + '?mobile=' + phone, null, 'POST', true);
        };
        this.checkUserUnique = function (uname) {
            return api.call(config.getUserUname + '?username=' + uname, null, 'POST', false);
        };
        this.getUser = function (username) {
            return api.call(config.getUser + '?username=' + username, null, 'POST', true);
        };
        this.getOrderList = function (order) {
            return api.call(config.getOrderList + '?username=' + order.uname + '&rows=' + order.rows + '&page=' + order.page, null, 'POST', true);
        };
        this.login = function (username, pwd) {
            return api.call(config.login + '?username=' + username + '&password=' + pwd, null, 'POST', true);
        };
        this.resetPassword = function (opt) {
            return api.call(config.resetPassword + '?username=' + opt.uname + '&pw=' + opt.pwd + '&identifyCode=' + opt.code, null, 'POST', true);
        };
        this.getOrderDetail = function (oid) {
            return api.call(config.getOrderDetail + '?oid=' + oid, null, 'POST', true);
        };

        /**
         * 获取报价单详情
         * @param qid
         * @returns {*}
         */
        this.getQuoteList = function (qid) {
            return api.call(config.getQuoteList + '?qid=' + qid, null, 'POST', true);
        };

        /**
         * 更新报价单
         * @param param
         * @returns {*}
         */
        this.updateQuote = function (param) {
            return api.call(config.updateQuote, param, 'POST', true);
        };

        /**
         * 获取用户的发票列表
         * @param uid
         * @returns {*}
         */
        this.getInvoiceList = function (uid) {
            return api.call(config.getInvoiceList + '?uid=' + uid, null, 'POST', true);
        };

        /**
         * 删除发票
         * @param invoiceId
         * @returns {*}
         */
        this.deleteInvoice = function (invoiceId) {
            return api.call(config.deleteInvoice + '?iid=' + invoiceId, null, 'POST', true);
        };

        /**
         * 更新发票信息
         * @param param
         * @returns {*}
         */
        this.updateInvoice = function (param) {
            return api.call(config.updateInvoice, param, 'POST', true);
        };


        /**
         * 添加发票信息
         * @param param
         * @returns {*}
         */
        this.addInvoice = function (param) {
            return api.call(config.addInvoice, param, 'POST', true);
        };

        /**
         * 获取消息列表
         * @param param
         * @returns {*}
         */
        this.getMessageList = function (param) {
            var uid = param.uid;
            var rows = param.rows || 1;
            var page = param.page || 20;
            var url = config.getMessageList + '?uid=' + uid + '&rows=' + rows + '&page=' + page;
            return api.call(url, null, 'GET', true);
        };

        /**
         * 获取积分信息
         * @param param
         * @returns {*}
         */
        this.getPointInfo = function (uid) {
            var url = config.getPointInfo + '?uid=' + uid;
            return api.call(url, null, 'GET', true);
        };


        /**
         * 获取积分信息列表
         * @param param
         * @returns {*}
         */
            //this.getPointInfo = function (uid) {
            //    return api.call(config.getPointInfo + '?uid=' + uid, null, 'GET', true);
            //};
        this.getPointInfo = function (uid) {
            var url = config.getPointInfo + '?uid=' + uid;
            return api.call(url, null, 'GET', true);
        };
        this.getPointList = function (param) {
            var uid = param.uid;
            var rows = param.rows || 1;
            var page = param.page || 20;
            var url = config.getPointList + '?uid=' + uid + '&rows=' + rows + '&page=' + page;
            return api.call(url, null, 'GET', true);
        };
        // index
        this.getPointRanking = function (uid) {
            var url = config.getPointRanking + '?uid=' + uid ;
            return api.call(url, null, 'GET', true);
        };
        // 我的任务
        this.getMyTaskList = function (param) {
            var uid = param.uid;
            var rows = param.rows || 1;
            var page = param.page || 20;
            var url = config.getMyTaskList + '?uid=' + uid  + '&rows=' + rows + '&page=' + page;
            return api.call(url, null, 'GET', true);
        };
        // 放弃任务
        this.getGiveUpTask = function (taskJid) {
            var url = config.getGiveUpTask + '?examineId=' + taskJid;
            return api.call(url, null, 'GET', true);
        };
        // 任务列表
        this.getTaskList = function (param) {
            var rows = param.rows || 1;
            var page = param.page || 20;
            var url = config.getTaskList  + '?rows=' + rows + '&page=' + page;
            return api.call(url, null, 'GET', true);
        };

        this.getTaskDetail = function (psid) {
            var url = config.endpoint + config.getTaskDetail + '?jobId=' + psid;
            return api.call(url, null, 'GET', true);
        };
        // 获取是否有惩罚
        this.getPunishment = function (uid) {
            var url = config.getPunishment + '?uid=' + uid;
            return api.call(url, null, 'GET', true);
        };
        // 领取任务
        this.getJobSuccess = function (req) {
            var url = config.getJobSuccess + '?jobId=' + req.jobId + '&uid' + req.uid + '&username' + req.username + '&mobile' + req.mobile + '&cardNo' + req.cardNo;
            return api.call(url, null, 'GET', true);
        };
        /**
         * 读取消息
         * @param msgId
         * @returns {*}
         */
        this.readMessage = function (msgId) {
            return api.call(config.readMessage + '?mSgid=' + msgId, null, 'POST', true);
        };

        /**
         * 提交建议
         * @param uId
         * @param suggest String
         * @returns {*}
         */
        this.commitSuggestion = function (param) {

            return api.call(config.commitSuggestion, param, 'POST', true);
        };
        /**
         * 申请Vip
         * @param param
         * @returns {*}
         */
        this.reqVip = function (param) {
            return api.call(config.reqVip, param, 'POST', true);
        };

        /**
         * 获取系统配置
         * @returns {*}
         */
        this.getSysConfig = function () {
            var configId = 1;//固定的ID
            return api.call(config.getSysConfig + "?configId=" + configId, null, "GET", false);
        };

        this.getPreList = function () {
            var type = config.dictType.brand;
            return api.call(config.getDictPre + '?type=' + type, null, 'GET', false);
        };

        this.createDemand = function (param) {
            return api.call(config.saveProductDemand, param, 'POST', true);
        };
        this.getWeChatConf = function (url) {
            var query = '?url=' + url;
            return api.call(config.wechatConf + query, null, 'GET', null);
        };
    }]);
/*隐藏Tabs*/
app.directive('hideTab', ['$rootScope', function ($rootScope) {
    return {
        restrict: 'AE',
        link: function (scope, ele, attr) {
            //$rootScope.hideTab = 'tabs-item-hide';
            scope.$on('$ionicView.enter', function () {
                scope.$watch(attr.hideTab, function (value) {
                    $rootScope.hideTab = value;
                });

            });
            scope.$on('$ionicView.beforeLeave', function () {
                $rootScope.hideTab = false;
            });
        }
    };
}]);

core.service('wechat', ['$location', '$rootScope', 'server', 'config', function ($location, $rootScope, server, config) {
    _self = this;
    this.init = function (url) {
        server.getWeChatConf(url).then(function (conf) {
            wx.config({
                debug: false, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。
                appId: conf.appid, // 必填，公众号的唯一标识
                timestamp: conf.timestamp, // 必填，生成签名的时间戳
                nonceStr: conf.noncestr, // 必填，生成签名的随机串
                signature: conf.signature,// 必填，签名，见附录1
                jsApiList: ['checkJsApi', 'chooseWXPay', 'hideOptionMenu',
                    'onMenuShareTimeline',
                    'onMenuShareAppMessage',
                    'onMenuShareQQ',
                    'onMenuShareWeibo'] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2
            });
        }, function (error) {
            //popup.alert({msg: "微信配置失败！"});
        });
    };
    this.share = function (shareData) {
        var shareInfo = shareData || config.defaultShareData;
        shareInfo.link = $location.absUrl();
        wx.ready(function () {
            wx.onMenuShareTimeline(shareInfo);
            wx.onMenuShareAppMessage(shareInfo);
            wx.onMenuShareQQ(shareInfo);
            wx.onMenuShareWeibo(shareInfo);
        });
    };

    $rootScope.$on('$locationChangeSuccess', function () {
        _self.init($location.absUrl());
        _self.share();
    });
}])
